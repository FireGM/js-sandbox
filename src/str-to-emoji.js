class StrToEmoji {
    convert(str) {
        return this._strToEmoji(str);
    }

    _emojiPool() {
        const emojiPool = new Map();
        emojiPool.set('a', ['ðŸ‡¦', 'ðŸ…°']);
        emojiPool.set('b', ['ðŸ‡§', 'ðŸ…±']);
        emojiPool.set('c', ['ðŸ‡¨']);
        emojiPool.set('d', ['ðŸ‡©']);
        emojiPool.set('e', ['ðŸ‡ª']);
        emojiPool.set('f', ['ðŸ‡«']);
        emojiPool.set('g', ['ðŸ‡¬']);
        emojiPool.set('h', ['ðŸ‡­']);
        emojiPool.set('i', ['ðŸ‡®']);
        emojiPool.set('j', ['ðŸ‡¯']);
        emojiPool.set('k', ['ðŸ‡°']);
        emojiPool.set('l', ['ðŸ‡±']);
        emojiPool.set('m', ['ðŸ‡²']);
        emojiPool.set('n', ['ðŸ‡³']);
        emojiPool.set('o', ['ðŸ‡´', 'ðŸ…¾']);
        emojiPool.set('p', ['ðŸ‡µ', 'ðŸ…¿']);
        emojiPool.set('q', ['ðŸ‡¶']);
        emojiPool.set('r', ['ðŸ‡·']);
        emojiPool.set('s', ['ðŸ‡¸']);
        emojiPool.set('t', ['ðŸ‡¹']);
        emojiPool.set('u', ['ðŸ‡º']);
        emojiPool.set('v', ['ðŸ‡»']);
        emojiPool.set('w', ['ðŸ‡¼']);
        emojiPool.set('x', ['ðŸ‡½']);
        emojiPool.set('y', ['ðŸ‡¾']);
        emojiPool.set('z', ['ðŸ‡¿']);

        emojiPool.set('id', ['ðŸ†”']);
        emojiPool.set('vs', ['ðŸ†š']);
        emojiPool.set('ab', ['ðŸ†Ž']);
        emojiPool.set('cl', ['ðŸ†‘']);
        emojiPool.set('sos', ['ðŸ†˜']);
        emojiPool.set('wc', ['ðŸš¾']);
        emojiPool.set('ng', ['ðŸ†–']);
        emojiPool.set('ok', ['ðŸ†—']);
        emojiPool.set('up', ['ðŸ†™']);
        emojiPool.set('cool', ['ðŸ†’']);
        emojiPool.set('new', ['ðŸ†•']);
        emojiPool.set('0', ['0âƒ£']);
        emojiPool.set('1', ['1âƒ£']);
        emojiPool.set('2', ['2âƒ£']);
        emojiPool.set('3', ['3âƒ£']);
        emojiPool.set('4', ['4âƒ£']);
        emojiPool.set('5', ['5âƒ£']);
        emojiPool.set('6', ['6âƒ£']);
        emojiPool.set('7', ['7âƒ£']);
        emojiPool.set('8', ['8âƒ£']);
        emojiPool.set('9', ['9âƒ£']);
        emojiPool.set('10', ['ðŸ”Ÿ']);
        return emojiPool;
    }

    _filterEp(ep, obj) {
        let current = obj;

        while (current) {
            const val = ep.get(current.val);
            if (val) {
                if (val.length > 1) {
                    val.shift();
                } else {
                    ep.delete(current.val);
                }
            }

            current = current.prev;
        }
        return ep;
    }

    _strToEmoji(str) {
        if (!str) {
            return [];
        }

        const root = [];

        const ep = this._emojiPool();

        ep.forEach((val, key) => {
            if (str.startsWith(key)) {
                root.push({ val: key, emoji: val[0], pos: 0, prev: null, next: [] });
            }
        });

        const checklist = [...root];
        const forwardChains = [];
        while (checklist.length) {
            const current = checklist.shift();

            const filtered = this._filterEp(this._emojiPool(), current);
            filtered.forEach((val, key) => {
                if (str.startsWith(key, current.pos + current.val.length)) {
                    const next = {
                        val: key,
                        emoji: val[0],
                        pos: current.pos + current.val.length,
                        prev: current, next: []
                    };

                    current.next.push(next);
                    checklist.push(next);
                }
            });

            if (!current.next.length) {
                forwardChains.push(current);
            }
        }

        let maxChain = { tail: null, length: 0 };
        for (const chain of forwardChains) {
            if (chain.pos + chain.val.length !== str.length) {
                continue;
            }
            let length = 0;
            let cur = chain;
            while (cur) {
                cur = cur.prev;
                ++length;
            }

            if (length > maxChain.length) {
                maxChain = { tail: chain, length: length };
            }
        }

        const result = [];
        let cur = maxChain.tail;
        while (cur) {
            result.push(cur.emoji);
            cur = cur.prev;
        }
        result.reverse();
        return result;
    }
}

module.exports = StrToEmoji;